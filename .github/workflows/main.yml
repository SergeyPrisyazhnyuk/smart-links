# This is a basic workflow to help you get started with Actions

name: Java CI

# Controls when the workflow will run
# on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

on:
  push:
    branches: ["main"]  # Запускаем на пуш в ветку main
  pull_request:
    branches: ["main"]  # Запускаем также на пул реквесты в ветку main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run Tests and Generate Coverage Report
        run: mvn clean verify jacoco:report
      - name: Send Coverage to Coveralls
        run: mvn coveralls:report
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}


#      - name: Build with Maven
#        run: mvn clean verify jacoco:report
#
#      - name: Send coverage to Coveralls
#        run: mvn coveralls:report
#        env:
#          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
#
#      - name: Check code coverage threshold
#        if: ${{ failure() }}
#        continue-on-error: true
#        run: |
#          # Извлекаем общий процент покрытия из HTML-отчета
#          COVERAGE=$(grep '<td><strong>Total</strong></td>' target/site/jacoco/index.html | awk '{print substr($NF, 0, length($NF)-1)}')
#
#          # Сравниваем с требуемым порогом (например, 90%)
#          if [[ "$COVERAGE" =~ ^([0-9]*(\.[0-9]+)?)$ ]]; then
#            if (( $(echo "$COVERAGE < 90" | bc -l) )); then
#              echo "::error::Code coverage ($COVERAGE%) below required minimum (90%). Please improve tests."
#              exit 1
#            fi
#          else
#            echo "::warning::Could not extract coverage information."
#          fi


#      - name: Build with Maven
#        run: mvn --batch-mode --update-snapshots package
#        run: mvn clean verify jacoco:report coveralls:jacoco

#      - name: Check code coverage threshold
#        if: ${{ failure() }}
#        continue-on-error: true
#        run: |
#              # Extract the total coverage percentage from the report
#              COVERAGE=$(grep '<total-covered' target/site/jacoco/index.html | grep -oE '[0-9]+\.[0-9]+%' | sed 's/%//')
#              
#              # Compare against desired threshold (90%)
#              if (( $(echo "$COVERAGE < 90" | bc -l) )); then
#                echo "::error::Code coverage ($COVERAGE%) below required minimum (90%). Please improve tests."
#                exit 1
#              fi

      # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

      # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
